services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage. Depending on the hardware you run this Compose on, you may be able
  # to reduce the interval and timeout in the healthcheck to speed up your `docker-compose up` times.
  dagster_postgresql:
    image: postgres:latest
    container_name: dagster_postgresql
    environment:
      POSTGRES_USER: ${DAGSTER_POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${DAGSTER_POSTGRES_PASSWORD}
      POSTGRES_DB: ${DAGSTER_POSTGRES_DB}
    ports:
      - "5433:5432"
    networks:
      - dagster-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U awopro11 -d dagster"]
      interval: 10s
      timeout: 8s
      retries: 5
    volumes:
      - dagster-pg-volume:/var/lib/postgresql/data
    logging:
      driver: "local"

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  dagster_code_harmony:
    build:
      context: .
      dockerfile: ./Dockerfile_harmony
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    container_name: dagster_code_harmony
    image: dagster_code_harmony_image
    restart: always
    environment:
      DAGSTER_CURRENT_IMAGE: "dagster_code_harmony_image"
      PYTHONPATH: "/opt/dagster/app"
    env_file:
      - ./.env
    volumes:
      - ./shared:/opt/dagster/app/shared
      - ./profiles.yml:/opt/dagster/app/dbt/profiles.yml
      - ./harmony:/opt/dagster/app
    networks:
      - dagster-network
    logging:
      driver: "local"

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  dagster_webserver:
    build:
      context: .
      dockerfile: ./Dockerfile_daemon
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    image: dagster_webserver_image
    restart: always
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "${DAGSTER_PORT}"
      - -w
      - workspace.yaml
    container_name: dagster_webserver
    expose:
      - "${DAGSTER_PORT}"
    env_file:
      - ./.env
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
    networks:
      - dagster-network
    logging:
      driver: "local"
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      dagster_code_harmony:
        condition: service_started

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  dagster_daemon:
    build:
      context: .
      dockerfile: ./Dockerfile_daemon
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    image: dagster_daemon_image
    entrypoint:
      - dagster-daemon
      - run
    container_name: dagster_daemon
    restart: always
    env_file:
      - ./.env
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ./dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
      - ./workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
    networks:
      - dagster-network
    logging:
      driver: "local"
    depends_on:
      dagster_postgresql:
        condition: service_healthy
      dagster_code_harmony:
        condition: service_started

  dagster_nginx:
    build: 
      dockerfile: ./nginx/Dockerfile_nginx
      args:
        HTTP_PROXY: ${HTTP_PROXY}
        HTTPS_PROXY: ${HTTPS_PROXY}
        NO_PROXY: ${NO_PROXY}
    container_name: dagster_nginx
    image: dagster_nginx_image
    ports:
      - "3500:80"
    env_file:
      - ./.env
    restart: always
    networks:
      - dagster-network
    logging:
      driver: "local"
    depends_on:
      dagster_webserver:
        condition: service_started

networks:
  dagster-network:
    name: dagster_network
    driver: bridge

volumes:
  dagster-pg-volume:
    name: dagster_pg_volume